class Solution:
    def possibleBipartition(self, N, dislikes):

        dict={k:set() for k in range(1,N+1)}
        for dislike in dislikes:
            dict[dislike[0]].add(dislike[1])
            dict[dislike[1]].add(dislike[0])

        tmp=sorted(dict.items(),key=lambda x:len(x[1]),reverse=True)
        n=[t[0] for t in tmp]
        group1=[]
        group2=[]

        def dfs(n):
            if len(n)==0:
                return True
            else:
                g1=False
                g2=False
                if len(set(group1)&dict[n[0]])==0:
                    group1.append(n[0])
                    g1=dfs(n[1:])
                    group1.pop()
                if g1:
                    return True
                if len(set(group2)&dict[n[0]])==0:
                    group2.append(n[0])
                    g2=dfs(n[1:])
                    group2.pop()
                return  g2
        return dfs(n)

s=Solution()
test=[

{"input":[100,[[20,25],[59,78],[86,90],[8,63],[29,44],[16,47],[73,82],[78,86],[29,70],[89,94],[43,63],[16,91],[76,88],[47,93],[16,84],[13,29],[59,97],[60,81],[21,59],[34,85],[9,93],[57,59],[59,61],[73,91],[79,85],[75,93],[54,73],[66,93],[44,77],[41,85],[25,58],[8,94],[80,85],[9,86],[27,72],[16,51],[8,25],[11,48],[37,63],[40,86],[28,98],[26,30],[15,48],[46,63],[70,72],[35,85],[12,81],[59,75],[25,79],[52,81],[3,77],[10,48],[9,29],[74,85],[14,26],[96,100],[91,93],[16,95],[13,25],[93,95],[32,72],[22,63],[5,29],[51,72],[81,83],[39,94],[10,59],[41,63],[13,94],[29,68],[5,72],[17,88],[56,77],[78,96],[50,63],[83,85],[10,73],[26,52],[62,73],[36,77],[48,79],[12,93],[15,28],[64,81],[76,81],[7,85],[23,86],[84,96],[33,72],[16,31],[59,71],[16,53],[38,88],[27,96],[42,72],[39,59],[11,28],[14,59],[9,28],[14,93],[18,96],[25,43],[73,97],[61,85],[6,25],[63,67],[48,83],[23,25],[72,89],[5,77],[19,86],[42,93],[56,72],[2,28],[20,63],[51,59],[59,66],[73,76],[48,74],[27,88],[88,90],[25,98],[16,60],[15,26],[92,94],[17,94],[62,88],[25,53],[58,77],[71,96],[82,88],[87,93],[27,81],[73,95],[79,81],[40,77],[53,85],[66,96],[30,73],[67,93],[11,25],[9,96],[26,61],[32,88],[14,88],[70,85],[10,88],[93,99],[29,58],[3,59],[33,63],[25,74],[1,86],[17,28],[63,68],[16,55],[53,94],[7,63],[37,59],[55,88],[56,93],[40,96],[69,88],[16,92],[22,73],[44,94],[18,94],[57,73],[86,99],[37,73],[26,46],[29,51],[9,85],[33,48],[4,59],[28,40],[9,63],[16,46],[39,93],[28,95],[13,59],[72,95],[88,97],[67,81],[32,86],[25,50],[80,93],[84,94],[26,41],[5,25],[9,94],[16,37],[61,81],[26,98],[63,80],[29,64],[64,94],[56,81],[68,96],[82,86],[11,73],[17,25],[63,89],[29,89],[37,48],[77,89],[42,77],[47,96],[16,65],[7,81],[83,96],[12,28],[69,93],[28,31],[79,96],[93,97],[32,48],[36,94],[22,25],[26,84],[18,25],[16,41],[28,66],[77,82],[19,85],[20,77],[42,94],[14,63],[13,73],[68,72],[58,93],[19,59],[85,99],[89,96],[69,96],[2,59],[20,26],[16,52],[59,65],[23,63],[54,59],[2,85],[15,85],[29,43],[54,93],[49,77],[89,93],[6,73],[9,77],[10,72],[45,77],[84,88],[56,59],[62,72],[59,70],[26,76],[75,96],[82,93],[30,59],[28,80],[78,81],[49,88],[31,88],[28,78],[54,96],[16,76],[19,73],[16,98],[26,62],[3,16],[59,95],[28,56],[48,69],[27,85],[72,75],[79,93],[75,85],[31,81],[49,81],[30,77],[28,38],[10,16],[64,77],[42,85],[47,72],[16,44],[3,25],[73,98],[20,29],[81,89],[36,88],[28,45],[8,59],[7,29],[63,64],[26,82],[25,90],[54,88],[28,92],[77,80],[12,63],[47,81],[85,97],[57,77],[4,25],[32,73],[14,73],[12,73],[21,25],[75,88],[40,63],[4,77],[7,48],[29,67],[35,48],[16,56],[53,77],[26,97],[47,94],[21,94],[41,81],[18,85],[33,96],[2,48],[46,48],[53,59],[78,94],[48,64],[27,94],[25,66],[59,68],[39,86],[28,82],[25,100],[15,96],[30,72],[20,93],[77,92],[16,78],[64,72],[31,96],[47,77],[26,60],[55,85],[11,77],[63,69],[16,54],[3,73],[17,73],[30,85],[68,77],[57,96],[22,72],[37,96],[43,85],[60,88],[16,40],[26,33],[22,59],[59,76],[25,76],[73,74],[28,47],[26,80],[72,90],[10,63],[77,78],[55,86],[67,72],[65,72],[76,94],[48,57],[56,73],[19,63],[7,96],[1,48],[23,93],[8,85],[84,93],[59,69],[82,94],[37,93],[2,81],[55,63],[51,81],[85,95],[42,59],[25,97],[6,77],[8,16],[22,96],[19,94],[41,77],[17,93],[69,85],[25,52],[56,63],[72,98],[29,32],[16,27],[81,99],[30,63],[50,72],[35,59],[16,49],[18,59],[16,57],[25,27],[19,77],[7,86],[27,29],[43,94],[44,96],[33,77],[19,25],[93,98],[26,36],[29,57],[24,85],[39,73],[29,83],[26,87],[23,29],[6,63],[50,93],[31,77],[10,28],[16,71],[26,27],[73,80],[21,72],[34,96],[25,45],[3,29],[57,72],[29,91]]], "output":True},
{"input":[5,[[1,2],[2,3],[3,4],[4,5],[1,5]]], "output":False},
{"input":[3,[[1,2],[1,3],[2,3]]], "output":False},
{"input":[4,[[1,2],[1,3],[2,4]]], "output":True},

]

for t in test:
    r=s.possibleBipartition(t['input'][0],t['input'][1])
    if r!=t['output']:
        print("error:"+str(t)+" out:"+str(r))